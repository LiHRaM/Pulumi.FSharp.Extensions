//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
[<AutoOpen>]
module Pulumi.FSharp.Azure.VirtualMachine

open Pulumi.FSharp.Azure.Core
open Pulumi.FSharp
open Pulumi.Azure.Compute

type VirtualMachineBuilder() =
    member _.Yield _ = AzureResource.Zero, VirtualMachineArgs()
    member _.Run(cargs, args: VirtualMachineArgs) = VirtualMachine(cargs.Name, args)

    [<CustomOperation("additionalCapabilities")>]
    member _.AdditionalCapabilities((cargs, args: VirtualMachineArgs), additionalCapabilities) =
        args.AdditionalCapabilities <- input additionalCapabilities
        cargs, args

    [<CustomOperation("availabilitySetId")>]
    member _.AvailabilitySetId((cargs, args: VirtualMachineArgs), availabilitySetId) =
        args.AvailabilitySetId <- input availabilitySetId
        cargs, args

    member _.AvailabilitySetId((cargs, args: VirtualMachineArgs), availabilitySetId) =
        args.AvailabilitySetId <- io availabilitySetId
        cargs, args

    [<CustomOperation("bootDiagnostics")>]
    member _.BootDiagnostics((cargs, args: VirtualMachineArgs), bootDiagnostics) =
        args.BootDiagnostics <- input bootDiagnostics
        cargs, args

    [<CustomOperation("deleteDataDisksOnTermination")>]
    member _.DeleteDataDisksOnTermination((cargs, args: VirtualMachineArgs), deleteDataDisksOnTermination) =
        args.DeleteDataDisksOnTermination <- input deleteDataDisksOnTermination
        cargs, args

    member _.DeleteDataDisksOnTermination((cargs, args: VirtualMachineArgs), deleteDataDisksOnTermination) =
        args.DeleteDataDisksOnTermination <- io deleteDataDisksOnTermination
        cargs, args

    [<CustomOperation("deleteOsDiskOnTermination")>]
    member _.DeleteOsDiskOnTermination((cargs, args: VirtualMachineArgs), deleteOsDiskOnTermination) =
        args.DeleteOsDiskOnTermination <- input deleteOsDiskOnTermination
        cargs, args

    member _.DeleteOsDiskOnTermination((cargs, args: VirtualMachineArgs), deleteOsDiskOnTermination) =
        args.DeleteOsDiskOnTermination <- io deleteOsDiskOnTermination
        cargs, args

    [<CustomOperation("identity")>]
    member _.Identity((cargs, args: VirtualMachineArgs), identity) =
        args.Identity <- input identity
        cargs, args

    [<CustomOperation("licenseType")>]
    member _.LicenseType((cargs, args: VirtualMachineArgs), licenseType) =
        args.LicenseType <- input licenseType
        cargs, args

    member _.LicenseType((cargs, args: VirtualMachineArgs), licenseType) =
        args.LicenseType <- io licenseType
        cargs, args

    [<CustomOperation("location")>]
    member _.Location((cargs, args: VirtualMachineArgs), location) =
        args.Location <- input location
        cargs, args

    member _.Location((cargs, args: VirtualMachineArgs), location) =
        args.Location <- io location
        cargs, args

    [<CustomOperation("name")>]
    member _.Name((cargs, args: VirtualMachineArgs), name) =
        args.Name <- input name
        cargs, args

    member _.Name((cargs, args: VirtualMachineArgs), name) =
        args.Name <- io name
        cargs, args

    [<CustomOperation("networkInterfaceIds")>]
    member _.NetworkInterfaceIds((cargs, args: VirtualMachineArgs), networkInterfaceIds) =
        args.NetworkInterfaceIds <- inputList networkInterfaceIds
        cargs, args

    [<CustomOperation("osProfile")>]
    member _.OsProfile((cargs, args: VirtualMachineArgs), osProfile) =
        args.OsProfile <- input osProfile
        cargs, args

    [<CustomOperation("osProfileLinuxConfig")>]
    member _.OsProfileLinuxConfig((cargs, args: VirtualMachineArgs), osProfileLinuxConfig) =
        args.OsProfileLinuxConfig <- input osProfileLinuxConfig
        cargs, args

    [<CustomOperation("osProfileSecrets")>]
    member _.OsProfileSecrets((cargs, args: VirtualMachineArgs), osProfileSecrets) =
        args.OsProfileSecrets <- inputList osProfileSecrets
        cargs, args

    [<CustomOperation("osProfileWindowsConfig")>]
    member _.OsProfileWindowsConfig((cargs, args: VirtualMachineArgs), osProfileWindowsConfig) =
        args.OsProfileWindowsConfig <- input osProfileWindowsConfig
        cargs, args

    [<CustomOperation("plan")>]
    member _.Plan((cargs, args: VirtualMachineArgs), plan) =
        args.Plan <- input plan
        cargs, args

    [<CustomOperation("primaryNetworkInterfaceId")>]
    member _.PrimaryNetworkInterfaceId((cargs, args: VirtualMachineArgs), primaryNetworkInterfaceId) =
        args.PrimaryNetworkInterfaceId <- input primaryNetworkInterfaceId
        cargs, args

    member _.PrimaryNetworkInterfaceId((cargs, args: VirtualMachineArgs), primaryNetworkInterfaceId) =
        args.PrimaryNetworkInterfaceId <- io primaryNetworkInterfaceId
        cargs, args

    [<CustomOperation("proximityPlacementGroupId")>]
    member _.ProximityPlacementGroupId((cargs, args: VirtualMachineArgs), proximityPlacementGroupId) =
        args.ProximityPlacementGroupId <- input proximityPlacementGroupId
        cargs, args

    member _.ProximityPlacementGroupId((cargs, args: VirtualMachineArgs), proximityPlacementGroupId) =
        args.ProximityPlacementGroupId <- io proximityPlacementGroupId
        cargs, args

    [<CustomOperation("resourceGroup")>]
    member _.ResourceGroupName((cargs, args: VirtualMachineArgs), resourceGroupName) =
        args.ResourceGroupName <- input resourceGroupName
        cargs, args

    member _.ResourceGroupName((cargs, args: VirtualMachineArgs), resourceGroupName) =
        args.ResourceGroupName <- io resourceGroupName
        cargs, args

    [<CustomOperation("storageDataDisks")>]
    member _.StorageDataDisks((cargs, args: VirtualMachineArgs), storageDataDisks) =
        args.StorageDataDisks <- inputList storageDataDisks
        cargs, args

    [<CustomOperation("storageImageReference")>]
    member _.StorageImageReference((cargs, args: VirtualMachineArgs), storageImageReference) =
        args.StorageImageReference <- input storageImageReference
        cargs, args

    [<CustomOperation("storageOsDisk")>]
    member _.StorageOsDisk((cargs, args: VirtualMachineArgs), storageOsDisk) =
        args.StorageOsDisk <- input storageOsDisk
        cargs, args

    [<CustomOperation("tags")>]
    member _.Tags((cargs, args: VirtualMachineArgs), tags) =
        args.Tags <- inputMap tags
        cargs, args

    [<CustomOperation("vmSize")>]
    member _.VmSize((cargs, args: VirtualMachineArgs), vmSize) =
        args.VmSize <- input vmSize
        cargs, args

    member _.VmSize((cargs, args: VirtualMachineArgs), vmSize) =
        args.VmSize <- io vmSize
        cargs, args

    [<CustomOperation("zones")>]
    member _.Zones((cargs, args: VirtualMachineArgs), zones) =
        args.Zones <- input zones
        cargs, args

    member _.Zones((cargs, args: VirtualMachineArgs), zones) =
        args.Zones <- io zones
        cargs, args

let virtualMachine = VirtualMachineBuilder()
