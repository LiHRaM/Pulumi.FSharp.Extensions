//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace Pulumi.FSharp.Azure

open Pulumi.Azure.Compute.Inputs
open Pulumi.FSharp

module Compute =
    [<AutoOpen>]
    module VirtualMachine =
        open Pulumi.Azure.Compute

        [<AutoOpen>]
        module StorageOsDisk =
            open Pulumi.Azure.Compute.Inputs
            
            type StorageOsDiskBuilder() =
                member _.Yield _ = [id]
                member _.Run(args) = List.fold (fun args f -> f args) (VirtualMachineStorageOsDiskArgs()) args
                [<CustomOperation("name")>]
                member _.Name(args, name) = (fun (args : VirtualMachineStorageOsDiskArgs) ->
                                                args.Name <- input name
                                                args) :: args

            let storageOsDisk = StorageOsDiskBuilder()
        
        type VirtualMachineBuilder() =
            member _.Yield(_: unit) = null, [ id ]
            member _.Run(name, args) =
                let func args f = f args
                VirtualMachine(name, (List.fold func (VirtualMachineArgs()) args))
            member this.Combine((lName, lArgs), (rName, rArgs)) =
                (match lName, rName with
                 | null, null -> null
                 | null, name -> name
                 | name, null -> name
                 | _ -> failwith "Duplicate name"),
                (List.concat [ lArgs; rArgs ])
            member this.For(args, delayedArgs) = this.Combine(args, delayedArgs ())
            member _.Delay f = f ()
            [<CustomOperation("name")>]
            member _.Name((_, args), newName) = newName, args
            member _.Yield arg =
                null,
                [ (let func (args: VirtualMachineArgs) =
                       args.StorageOsDisk <- input arg
                       args
                   func) ]
            member _.Zero() =
                ()

        let virtualMachine = VirtualMachineBuilder()

module Test =
    open Compute
    
    let one =
        virtualMachine {
            storageOsDisk {
                name "disk1"
            }
            name "name1"
        }
        
    let two =
        virtualMachine {
            name "name2-1"
            storageOsDisk {
                name "disk2"
            }
            name "name2-2"
        }
        
    let three =
        virtualMachine {
            name "name3"
            storageOsDisk {
                name "disk3"
            }
        }