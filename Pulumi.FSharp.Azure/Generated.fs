//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace Pulumi.FSharp.Azure

open Pulumi.FSharp

module Advisor =
    open Pulumi.Azure.Advisor

module Compute =
    open Pulumi.Azure.Compute
    open Pulumi.Azure.Compute.Inputs

    type VirtualMachineOsProfileBuilder() =
        member _.Yield(_: unit) = null, [ id ]

        member _.Run(_, args) =
            let func args f = f args
            ()
            List.fold func (VirtualMachineOsProfileArgs()) args

        member this.Combine((lName, lArgs), (rName, rArgs)) =
            (match lName, rName with
             | null, null -> null
             | null, name -> name
             | name, null -> name
             | _ -> failwith "Duplicate name"),
            (List.concat [ lArgs; rArgs ])

        member this.For(args, delayedArgs) = this.Combine(args, delayedArgs ())
        member _.Delay f = f ()
        member _.Zero _ = ()

        [<CustomOperation("adminPassword")>]
        member _.AdminPassword((n, args), adminPassword) =
            let apply (args: VirtualMachineOsProfileArgs) =
                args.AdminPassword <- input adminPassword
                args

            ()
            n, List.Cons(apply, args)

        member _.AdminPassword((n, args), adminPassword) =
            let apply (args: VirtualMachineOsProfileArgs) =
                args.AdminPassword <- io adminPassword
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("adminUsername")>]
        member _.AdminUsername((n, args), adminUsername) =
            let apply (args: VirtualMachineOsProfileArgs) =
                args.AdminUsername <- input adminUsername
                args

            ()
            n, List.Cons(apply, args)

        member _.AdminUsername((n, args), adminUsername) =
            let apply (args: VirtualMachineOsProfileArgs) =
                args.AdminUsername <- io adminUsername
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("computerName")>]
        member _.ComputerName((n, args), computerName) =
            let apply (args: VirtualMachineOsProfileArgs) =
                args.ComputerName <- input computerName
                args

            ()
            n, List.Cons(apply, args)

        member _.ComputerName((n, args), computerName) =
            let apply (args: VirtualMachineOsProfileArgs) =
                args.ComputerName <- io computerName
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("customData")>]
        member _.CustomData((n, args), customData) =
            let apply (args: VirtualMachineOsProfileArgs) =
                args.CustomData <- input customData
                args

            ()
            n, List.Cons(apply, args)

        member _.CustomData((n, args), customData) =
            let apply (args: VirtualMachineOsProfileArgs) =
                args.CustomData <- io customData
                args

            ()
            n, List.Cons(apply, args)

    let virtualMachineOsProfile = VirtualMachineOsProfileBuilder()

    type VirtualMachineStorageOsDiskBuilder() =
        member _.Yield(_: unit) = null, [ id ]

        member _.Run(_, args) =
            let func args f = f args
            ()
            List.fold func (VirtualMachineStorageOsDiskArgs()) args

        member this.Combine((lName, lArgs), (rName, rArgs)) =
            (match lName, rName with
             | null, null -> null
             | null, name -> name
             | name, null -> name
             | _ -> failwith "Duplicate name"),
            (List.concat [ lArgs; rArgs ])

        member this.For(args, delayedArgs) = this.Combine(args, delayedArgs ())
        member _.Delay f = f ()
        member _.Zero _ = ()

        [<CustomOperation("caching")>]
        member _.Caching((n, args), caching) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.Caching <- input caching
                args

            ()
            n, List.Cons(apply, args)

        member _.Caching((n, args), caching) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.Caching <- io caching
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("createOption")>]
        member _.CreateOption((n, args), createOption) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.CreateOption <- input createOption
                args

            ()
            n, List.Cons(apply, args)

        member _.CreateOption((n, args), createOption) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.CreateOption <- io createOption
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("diskSizeGb")>]
        member _.DiskSizeGb((n, args), diskSizeGb) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.DiskSizeGb <- input diskSizeGb
                args

            ()
            n, List.Cons(apply, args)

        member _.DiskSizeGb((n, args), diskSizeGb) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.DiskSizeGb <- io diskSizeGb
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("imageUri")>]
        member _.ImageUri((n, args), imageUri) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.ImageUri <- input imageUri
                args

            ()
            n, List.Cons(apply, args)

        member _.ImageUri((n, args), imageUri) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.ImageUri <- io imageUri
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("managedDiskId")>]
        member _.ManagedDiskId((n, args), managedDiskId) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.ManagedDiskId <- input managedDiskId
                args

            ()
            n, List.Cons(apply, args)

        member _.ManagedDiskId((n, args), managedDiskId) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.ManagedDiskId <- io managedDiskId
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("managedDiskType")>]
        member _.ManagedDiskType((n, args), managedDiskType) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.ManagedDiskType <- input managedDiskType
                args

            ()
            n, List.Cons(apply, args)

        member _.ManagedDiskType((n, args), managedDiskType) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.ManagedDiskType <- io managedDiskType
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("name")>]
        member _.Name((n, args), name) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.Name <- input name
                args

            ()
            n, List.Cons(apply, args)

        member _.Name((n, args), name) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.Name <- io name
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("osType")>]
        member _.OsType((n, args), osType) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.OsType <- input osType
                args

            ()
            n, List.Cons(apply, args)

        member _.OsType((n, args), osType) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.OsType <- io osType
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("vhdUri")>]
        member _.VhdUri((n, args), vhdUri) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.VhdUri <- input vhdUri
                args

            ()
            n, List.Cons(apply, args)

        member _.VhdUri((n, args), vhdUri) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.VhdUri <- io vhdUri
                args

            ()
            n, List.Cons(apply, args)

        [<CustomOperation("writeAcceleratorEnabled")>]
        member _.WriteAcceleratorEnabled((n, args), writeAcceleratorEnabled) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.WriteAcceleratorEnabled <- input writeAcceleratorEnabled
                args

            ()
            n, List.Cons(apply, args)

        member _.WriteAcceleratorEnabled((n, args), writeAcceleratorEnabled) =
            let apply (args: VirtualMachineStorageOsDiskArgs) =
                args.WriteAcceleratorEnabled <- io writeAcceleratorEnabled
                args

            ()
            n, List.Cons(apply, args)

    let virtualMachineStorageOsDisk = VirtualMachineStorageOsDiskBuilder()

    type VirtualMachineBuilder() =
        member _.Yield(_: unit) = null, [ id ]

        member _.Run(name, args) =
            let func args f = f args
            ()
            VirtualMachine(name, (List.fold func (VirtualMachineArgs()) args))

        member this.Combine((lName, lArgs), (rName, rArgs)) =
            (match lName, rName with
             | null, null -> null
             | null, name -> name
             | name, null -> name
             | _ -> failwith "Duplicate name"),
            (List.concat [ lArgs; rArgs ])

        member this.For(args, delayedArgs) = this.Combine(args, delayedArgs ())
        member _.Delay f = f ()
        member _.Zero _ = ()

        [<CustomOperation("name")>]
        member _.Name((_, args), newName) = newName, args

        member _.Yield arg =
            null,
            [ (
               let func (args: VirtualMachineArgs) =
                   args.AdditionalCapabilities <- input arg
                   args

               ()
               func) ]

        [<CustomOperation("availabilitySetId")>]
        member _.AvailabilitySetId((name, args), availabilitySetId) =
            let apply (args: VirtualMachineArgs) =
                args.AvailabilitySetId <- input availabilitySetId
                args

            ()
            name, List.Cons(apply, args)

        member _.AvailabilitySetId((name, args), availabilitySetId) =
            let apply (args: VirtualMachineArgs) =
                args.AvailabilitySetId <- io availabilitySetId
                args

            ()
            name, List.Cons(apply, args)

        member _.Yield arg =
            null,
            [ (
               let func (args: VirtualMachineArgs) =
                   args.BootDiagnostics <- input arg
                   args

               ()
               func) ]

        [<CustomOperation("deleteDataDisksOnTermination")>]
        member _.DeleteDataDisksOnTermination((name, args), deleteDataDisksOnTermination) =
            let apply (args: VirtualMachineArgs) =
                args.DeleteDataDisksOnTermination <- input deleteDataDisksOnTermination
                args

            ()
            name, List.Cons(apply, args)

        member _.DeleteDataDisksOnTermination((name, args), deleteDataDisksOnTermination) =
            let apply (args: VirtualMachineArgs) =
                args.DeleteDataDisksOnTermination <- io deleteDataDisksOnTermination
                args

            ()
            name, List.Cons(apply, args)

        [<CustomOperation("deleteOsDiskOnTermination")>]
        member _.DeleteOsDiskOnTermination((name, args), deleteOsDiskOnTermination) =
            let apply (args: VirtualMachineArgs) =
                args.DeleteOsDiskOnTermination <- input deleteOsDiskOnTermination
                args

            ()
            name, List.Cons(apply, args)

        member _.DeleteOsDiskOnTermination((name, args), deleteOsDiskOnTermination) =
            let apply (args: VirtualMachineArgs) =
                args.DeleteOsDiskOnTermination <- io deleteOsDiskOnTermination
                args

            ()
            name, List.Cons(apply, args)

        member _.Yield arg =
            null,
            [ (
               let func (args: VirtualMachineArgs) =
                   args.Identity <- input arg
                   args

               ()
               func) ]

        [<CustomOperation("licenseType")>]
        member _.LicenseType((name, args), licenseType) =
            let apply (args: VirtualMachineArgs) =
                args.LicenseType <- input licenseType
                args

            ()
            name, List.Cons(apply, args)

        member _.LicenseType((name, args), licenseType) =
            let apply (args: VirtualMachineArgs) =
                args.LicenseType <- io licenseType
                args

            ()
            name, List.Cons(apply, args)

        [<CustomOperation("location")>]
        member _.Location((name, args), location) =
            let apply (args: VirtualMachineArgs) =
                args.Location <- input location
                args

            ()
            name, List.Cons(apply, args)

        member _.Location((name, args), location) =
            let apply (args: VirtualMachineArgs) =
                args.Location <- io location
                args

            ()
            name, List.Cons(apply, args)

        [<CustomOperation("resourceName")>]
        member _.ResourceName((name, args), resourceName) =
            let apply (args: VirtualMachineArgs) =
                args.Name <- input resourceName
                args

            ()
            name, List.Cons(apply, args)

        member _.ResourceName((name, args), resourceName) =
            let apply (args: VirtualMachineArgs) =
                args.Name <- io resourceName
                args

            ()
            name, List.Cons(apply, args)

        [<CustomOperation("networkInterfaceIds")>]
        member _.NetworkInterfaceIds((name, args), networkInterfaceIds) =
            let apply (args: VirtualMachineArgs) =
                args.NetworkInterfaceIds <- inputList networkInterfaceIds
                args

            ()
            name, List.Cons(apply, args)

        member _.Yield arg =
            null,
            [ (
               let func (args: VirtualMachineArgs) =
                   args.OsProfile <- input arg
                   args

               ()
               func) ]

        member _.Yield arg =
            null,
            [ (
               let func (args: VirtualMachineArgs) =
                   args.OsProfileLinuxConfig <- input arg
                   args

               ()
               func) ]

        [<CustomOperation("osProfileSecrets")>]
        member _.OsProfileSecrets((name, args), osProfileSecrets) =
            let apply (args: VirtualMachineArgs) =
                args.OsProfileSecrets <- inputList osProfileSecrets
                args

            ()
            name, List.Cons(apply, args)

        member _.Yield arg =
            null,
            [ (
               let func (args: VirtualMachineArgs) =
                   args.OsProfileWindowsConfig <- input arg
                   args

               ()
               func) ]

        member _.Yield arg =
            null,
            [ (
               let func (args: VirtualMachineArgs) =
                   args.Plan <- input arg
                   args

               ()
               func) ]

        [<CustomOperation("primaryNetworkInterfaceId")>]
        member _.PrimaryNetworkInterfaceId((name, args), primaryNetworkInterfaceId) =
            let apply (args: VirtualMachineArgs) =
                args.PrimaryNetworkInterfaceId <- input primaryNetworkInterfaceId
                args

            ()
            name, List.Cons(apply, args)

        member _.PrimaryNetworkInterfaceId((name, args), primaryNetworkInterfaceId) =
            let apply (args: VirtualMachineArgs) =
                args.PrimaryNetworkInterfaceId <- io primaryNetworkInterfaceId
                args

            ()
            name, List.Cons(apply, args)

        [<CustomOperation("proximityPlacementGroupId")>]
        member _.ProximityPlacementGroupId((name, args), proximityPlacementGroupId) =
            let apply (args: VirtualMachineArgs) =
                args.ProximityPlacementGroupId <- input proximityPlacementGroupId
                args

            ()
            name, List.Cons(apply, args)

        member _.ProximityPlacementGroupId((name, args), proximityPlacementGroupId) =
            let apply (args: VirtualMachineArgs) =
                args.ProximityPlacementGroupId <- io proximityPlacementGroupId
                args

            ()
            name, List.Cons(apply, args)

        [<CustomOperation("resourceGroup")>]
        member _.ResourceGroup((name, args), resourceGroupName) =
            let apply (args: VirtualMachineArgs) =
                args.ResourceGroupName <- input resourceGroupName
                args

            ()
            name, List.Cons(apply, args)

        member _.ResourceGroup((name, args), resourceGroupName) =
            let apply (args: VirtualMachineArgs) =
                args.ResourceGroupName <- io resourceGroupName
                args

            ()
            name, List.Cons(apply, args)

        [<CustomOperation("storageDataDisks")>]
        member _.StorageDataDisks((name, args), storageDataDisks) =
            let apply (args: VirtualMachineArgs) =
                args.StorageDataDisks <- inputList storageDataDisks
                args

            ()
            name, List.Cons(apply, args)

        member _.Yield arg =
            null,
            [ (
               let func (args: VirtualMachineArgs) =
                   args.StorageImageReference <- input arg
                   args

               ()
               func) ]

        member _.Yield arg =
            null,
            [ (
               let func (args: VirtualMachineArgs) =
                   args.StorageOsDisk <- input arg
                   args

               ()
               func) ]

        [<CustomOperation("tags")>]
        member _.Tags((name, args), tags) =
            let apply (args: VirtualMachineArgs) =
                args.Tags <- inputMap tags
                args

            ()
            name, List.Cons(apply, args)

        [<CustomOperation("vmSize")>]
        member _.VmSize((name, args), vmSize) =
            let apply (args: VirtualMachineArgs) =
                args.VmSize <- input vmSize
                args

            ()
            name, List.Cons(apply, args)

        member _.VmSize((name, args), vmSize) =
            let apply (args: VirtualMachineArgs) =
                args.VmSize <- io vmSize
                args

            ()
            name, List.Cons(apply, args)

        [<CustomOperation("zones")>]
        member _.Zones((name, args), zones) =
            let apply (args: VirtualMachineArgs) =
                args.Zones <- input zones
                args

            ()
            name, List.Cons(apply, args)

        member _.Zones((name, args), zones) =
            let apply (args: VirtualMachineArgs) =
                args.Zones <- io zones
                args

            ()
            name, List.Cons(apply, args)

    let virtualMachine = VirtualMachineBuilder()

module Storage =
    open Pulumi.Azure.Storage
    open Pulumi.Azure.Storage.Inputs
